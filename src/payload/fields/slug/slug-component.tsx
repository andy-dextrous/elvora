"use client"

import React, { useCallback, useEffect, useRef } from "react"
import { TextFieldClientProps } from "payload"

import {
  useField,
  Button,
  TextInput,
  FieldLabel,
  useFormFields,
  useForm,
  useDocumentInfo,
} from "@payloadcms/ui"

import { formatSlug } from "./format-slug"
import "./index.scss"

type SlugComponentProps = {
  fieldToUse: string
  checkboxFieldPath: string
} & TextFieldClientProps

export const SlugComponent: React.FC<SlugComponentProps> = ({
  field,
  fieldToUse,
  checkboxFieldPath: checkboxFieldPathFromProps,
  path,
  readOnly: readOnlyFromProps,
}) => {
  const { label } = field

  const checkboxFieldPath = path?.includes(".")
    ? `${path}.${checkboxFieldPathFromProps}`
    : checkboxFieldPathFromProps

  const { value, setValue } = useField<string>({ path: path || field.name })

  const { dispatchFields } = useForm()
  const { id } = useDocumentInfo()

  // Track if user has manually edited the slug
  const hasManualEdit = useRef(false)
  const lastTargetValue = useRef<string>("")

  // The value of the checkbox
  const checkboxValue = useFormFields(([fields]) => {
    return fields[checkboxFieldPath]?.value as boolean
  })

  // The value of the field we're listening to for the slug
  const targetFieldValue = useFormFields(([fields]) => {
    return fields[fieldToUse]?.value as string
  })

  // Set initial lock state based on whether document exists
  useEffect(() => {
    if (id && checkboxValue === undefined) {
      // Existing documents should start locked
      dispatchFields({
        type: "UPDATE",
        path: checkboxFieldPath,
        value: true,
      })
    } else if (!id && checkboxValue === undefined) {
      // New documents should start unlocked
      dispatchFields({
        type: "UPDATE",
        path: checkboxFieldPath,
        value: false,
      })
    }
  }, [id, checkboxValue, checkboxFieldPath, dispatchFields])

  // Check if current slug differs from what would be auto-generated (persistent manual edit detection)
  const wouldBeAutoGenerated = targetFieldValue ? formatSlug(targetFieldValue) : ""
  const hasBeenManuallyEdited = value !== wouldBeAutoGenerated && value !== ""

  // Handle auto-sync from title (only for new documents that haven't been manually edited)
  useEffect(() => {
    // Only auto-sync if:
    // 1. Not locked
    // 2. Slug matches what would be auto-generated (hasn't been manually edited)
    // 3. Target field has changed
    // 4. Document is new (no ID yet)
    const shouldAutoSync =
      !checkboxValue &&
      !hasBeenManuallyEdited &&
      !id &&
      targetFieldValue !== lastTargetValue.current

    if (shouldAutoSync) {
      lastTargetValue.current = targetFieldValue

      if (targetFieldValue) {
        const formattedSlug = formatSlug(targetFieldValue)
        if (value !== formattedSlug) {
          setValue(formattedSlug)
        }
      } else {
        if (value !== "") {
          setValue("")
        }
      }
    }
  }, [targetFieldValue, checkboxValue, setValue, value, hasBeenManuallyEdited, id])

  const handleLock = useCallback(
    (e: React.MouseEvent<Element>) => {
      e.preventDefault()

      dispatchFields({
        type: "UPDATE",
        path: checkboxFieldPath,
        value: !checkboxValue,
      })
    },
    [checkboxValue, checkboxFieldPath, dispatchFields]
  )

  const readOnly = readOnlyFromProps || checkboxValue

  return (
    <div className="field-type slug-field-component">
      <div className="label-wrapper">
        <FieldLabel htmlFor={`field-${path}`} label={label} />

        <Button className="lock-button" buttonStyle="none" onClick={handleLock}>
          {checkboxValue ? "Unlock" : "Lock"}
        </Button>
      </div>

      <TextInput
        value={value}
        onChange={setValue}
        path={path || field.name}
        readOnly={Boolean(readOnly)}
      />
    </div>
  )
}
